source C:/Users/Sourav/AppData/Local/nvim/init.vim
"" ======================================
"" Welcome to Sourav Rakshit's vimrc file
"" ======================================
"set nocompatible  "be iMproved, required
"set exrc

"set encoding=UTF-8

"set rtp+=$HOME/.vim/bundle/Vundle.vim

"call vundle#begin('$HOME/.vim/bundle/')
"" ==== PLUGINS ====

"Plugin 'VundleVim/Vundle.vim'
"Plugin 'vim-scripts/L9'
"Plugin 'tpope/vim-fugitive'
"Plugin 'rstacruz/sparkup', {'rtp':'vim'}
"Plugin 'octol/vim-cpp-enhanced-highlight'
"Plugin 'vim-airline/vim-airline'
"Plugin 'vim-airline/vim-airline-themes'
"Plugin 'tpope/vim-commentary'
"Plugin 'bogado/file-line'
"Plugin 'frazrepo/vim-rainbow'

"" Plugin 'neoclide/coc.nvim' "Coc Auto Completer

"" ==== THEMES ====
"Plugin 'morhetz/gruvbox'
"Plugin 'tomasr/molokai'
"Plugin 'joshdick/onedark.vim'
"Plugin 'hzchirs/vim-material'

"Plugin 'ryanoasis/vim-devicons'

"" ==== END PLUGINS ====

"call vundle#end()

"" ====== TEMPLATE SETTINGS =======
":autocmd BufNewFile *.cpp 0r $HOME/.vim/templates/CPP/skeleton.cpp
":autocmd BufNewFile *.cpp exe "1," . 10 . "g/created:.*/s//created: " .strftime("%d.%m.%Y %H:%M:%S")
":autocmd BufNewfile *.cpp :115
":autocmd BufNewFile *.cc 0r $HOME/.vim/templates/CPP/skeleton.cc
":autocmd BufNewFile *.cc exe "1," . 10 . "g/created:.*/s//created: " .strftime("%d.%m.%Y %H:%M:%S")
":autocmd BufNewfile *.cc :14
"" :autocmd filetype cpp nnoremap <F5> :w <bar> !g++ -ulimit -Wall -Wshadow -Wno-unused-result -std=c++17 -DLOCAL -O2 % -o %:r && %:r <CR>
"" :autocmd filetype cpp nnoremap <F6> :w <bar> !g++ -ulimit -Wall -Wshadow -Wno-unused-result -std=c++17 -DLOCAL -O2 % -o %:r && %:r.exe < in.txt > out.txt 2>&1 && cat out.txt <CR>

"" Run
":autocmd filetype cpp nnoremap <F5> :w <bar> !%:r <CR>
"" Run with input file
":autocmd filetype cpp nnoremap <F6> :w <bar> !%:r < in.txt > out.txt 2>&1 && cat out.txt <CR>
"" Compile
":autocmd filetype cpp nnoremap <F8> :w <bar> !g++ -std=c++17 -Wshadow -Wall -DLOCAL -O2 % -o %:r -DLOCAL <CR>
"" Build with debug flags
":autocmd filetype cpp nnoremap <F9> :w <bar> !g++ -std=c++17 -Wshadow -Wall -Wno-unused-result % -o %:r -g -D_GLIBCXX_DEBUG -DLOCAL <CR>

"" ===== TEMPLATE SETTINGS END =====

"" ==== FONT SETTINGS ====
"if has("gui_running")
"  if has("gui_gtk2")
"    set guifont=Consolas\ 12
"  elseif has("gui_macvim")
"    set guifont=Menlo\ Regular:h12
"  elseif has("gui_win32")
"    set guifont=Cascadia\ Code:h10
"  endif
"endif

"" ==== FONT SETTINGS END =====

"" ===== WSL SETTINGS ======
"" if has("win32")
""     set shell=wt
""     set shellpipe=|
""     set shellredir=>
""     set shellcmdflag=
"" endif
"" ===== WSL SETTINGS END =====

"" ==== KEYMAPS =====

"inore <C-k> <Esc>
"nnore %ya gg"*yG
"" nnoremap <S-Tab> <<
"" inoremap <S-Tab> <C-d>
"" nnoremap <Tab> >>
"nnoremap <F10> :!ubuntu <CR>

"" ==== KEYMAPA END ====

"let g:airline_left_sep = '»'
"let g:airline_left_sep = '▶'
"let g:airline_right_sep = '«'
"let g:airline_right_sep = '◀'
"" let g:airline_symbols.linenr = '␊'
"" let g:airline_symbols.linenr = '␤'
"" let g:airline_symbols.linenr = '¶'
"" let g:airline_symbols.branch = '⎇'
"" let g:airline_symbols.paste = 'ρ'
"" let g:airline_symbols.paste = 'Þ'
"" let g:airline_symbols.paste = '∥'
"" let g:airline_symbols.whitespace = 'Ξ'

"" ==== GENERAL SETTINGS =====
"set fillchars+=vert:\|
"syntax on
"set ruler
"set mouse=a " set the value to c to disable
"set hidden
"set autoindent
"set number
"set relativenumber
"autocmd InsertEnter * :set norelativenumber
"autocmd InsertLeave * :set relativenumber
"set laststatus=2
"set nowrap
"set smartindent
"set st=4 sw=4 et
"set shiftwidth=4
"set ff=unix
"set backspace=indent,eol,start
"set tabstop=4
"set colorcolumn=80
"set laststatus=2
"colo molokai
"set wildmenu
"" set spell
"set autoread
"set statusline=WelcomeToVim!
"highlight Comment guifg=#A9A9A9
":set foldmethod=syntax
":set ffs=unix
":set guioptions-=m  "remove menu bar
":set guioptions-=T  "remove toolbar
":set guioptions-=r  "remove right-hand scroll bar
"" :set guioptions-=L  "remove left-hand scroll bar
":set lines=999 columns=999
"" let g:ycm_path_to_python_interpreter="C:/Users/Sourav/AppData/Local/Programs/Python/Python38-32/python.exe"

":set nocp
"filetype plugin on

"" ==== GENERAL SETTINGS END =====
""
"" ==== Airline Settings =====
"" let g:airline_theme='material'
""


"" ==== COC Settings ========
"" TextEdit might fail if hidden is not set.
"" set hidden

"" " Some servers have issues with backup files, see #649.
"" set nobackup
"" set nowritebackup

"" " Give more space for displaying messages.
"" set cmdheight=2

"" " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
"" " delays and poor user experience.
"" set updatetime=300

"" " Don't pass messages to |ins-completion-menu|.
"" set shortmess+=c

"" " Always show the signcolumn, otherwise it would shift the text each time
"" " diagnostics appear/become resolved.
"" if has("patch-8.1.1564")
""   " Recently vim can merge signcolumn and number column into one
""   set signcolumn=number
"" else
""   set signcolumn=yes
"" endif

"" " Use tab for trigger completion with characters ahead and navigate.
"" " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
"" " other plugin before putting this into your config.
"" inoremap <silent><expr> <TAB>
""       \ pumvisible() ? "\<C-n>" :
""       \ <SID>check_back_space() ? "\<TAB>" :
""       \ coc#refresh()
"" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

"" function! s:check_back_space() abort
""   let col = col('.') - 1
""   return !col || getline('.')[col - 1]  =~# '\s'
"" endfunction

"" " Use <c-space> to trigger completion.
"" if has('nvim')
""   inoremap <silent><expr> <c-space> coc#refresh()
"" else
""   inoremap <silent><expr> <c-@> coc#refresh()
"" endif

"" " Make <CR> auto-select the first completion item and notify coc.nvim to
"" " format on enter, <cr> could be remapped by other vim plugin
"" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
""                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

"" " Use `[g` and `]g` to navigate diagnostics
"" " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
"" nmap <silent> [g <Plug>(coc-diagnostic-prev)
"" nmap <silent> ]g <Plug>(coc-diagnostic-next)

"" " GoTo code navigation.
"" nmap <silent> gd <Plug>(coc-definition)
"" nmap <silent> gy <Plug>(coc-type-definition)
"" nmap <silent> gi <Plug>(coc-implementation)
"" nmap <silent> gr <Plug>(coc-references)

"" " Use K to show documentation in preview window.
"" nnoremap <silent> K :call <SID>show_documentation()<CR>

"" function! s:show_documentation()
""   if (index(['vim','help'], &filetype) >= 0)
""     execute 'h '.expand('<cword>')
""   elseif (coc#rpc#ready())
""     call CocActionAsync('doHover')
""   else
""     execute '!' . &keywordprg . " " . expand('<cword>')
""   endif
"" endfunction

"" " Highlight the symbol and its references when holding the cursor.
"" autocmd CursorHold * silent call CocActionAsync('highlight')

"" " Symbol renaming.
"" nmap <leader>rn <Plug>(coc-rename)

"" " Formatting selected code.
"" xmap <leader>f  <Plug>(coc-format-selected)
"" nmap <leader>f  <Plug>(coc-format-selected)

"" augroup mygroup
""   autocmd!
""   " Setup formatexpr specified filetype(s).
""   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
""   " Update signature help on jump placeholder.
""   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
"" augroup end

"" " Applying codeAction to the selected region.
"" " Example: `<leader>aap` for current paragraph
"" xmap <leader>a  <Plug>(coc-codeaction-selected)
"" nmap <leader>a  <Plug>(coc-codeaction-selected)

"" " Remap keys for applying codeAction to the current buffer.
"" nmap <leader>ac  <Plug>(coc-codeaction)
"" " Apply AutoFix to problem on the current line.
"" nmap <leader>qf  <Plug>(coc-fix-current)

"" " Map function and class text objects
"" " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
"" xmap if <Plug>(coc-funcobj-i)
"" omap if <Plug>(coc-funcobj-i)
"" xmap af <Plug>(coc-funcobj-a)
"" omap af <Plug>(coc-funcobj-a)
"" xmap ic <Plug>(coc-classobj-i)
"" omap ic <Plug>(coc-classobj-i)
"" xmap ac <Plug>(coc-classobj-a)
"" omap ac <Plug>(coc-classobj-a)

"" " Remap <C-f> and <C-b> for scroll float windows/popups.
"" if has('nvim-0.4.0') || has('patch-8.2.0750')
""   nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
""   nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
""   inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
""   inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
""   vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
""   vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
"" endif


"" " Use CTRL-S for selections ranges.
"" " Requires 'textDocument/selectionRange' support of language server.
"" nmap <silent> <C-s> <Plug>(coc-range-select)
"" xmap <silent> <C-s> <Plug>(coc-range-select)

"" " Add `:Format` command to format current buffer.
"" command! -nargs=0 Format :call CocAction('format')

"" " Add `:Fold` command to fold current buffer.
"" command! -nargs=? Fold :call     CocAction('fold', <f-args>)

"" " Add `:OR` command for organize imports of the current buffer.
"" command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

"" " Add (Neo)Vim's native statusline support.
""  NOTE Please see `:h coc-status` for integrations with external plugins that
"" " provide custom statusline: lightline.vim, vim-airline.
"" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

"" " Mappings for CoCList
"" " Show all diagnostics.
"" nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
"" " Manage extensions.
"" nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
"" " Show commands.
"" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
"" " Find symbol of current document.
"" nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
"" " Search workspace symbols.
"" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
"" " Do default action for next item.
"" nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
"" " Do default action for previous item.
"" nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
"" " Resume latest coc list.
"" nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
"" " ==== COC Settings End ======
